{"ast":null,"code":"import _defineProperty from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement } from './index-1a99aeb7.js';\nimport { b as getIonMode } from './ionic-global-04e268e7.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-4d272360.js';\nimport { p as printIonWarning, b as printIonError } from './index-c4b11676.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\nimport { p as parseDate, f as getToday, G as is24Hour, P as getLocalizedDateTime, D as getMonthAndYear, H as getLocalizedTime, Q as getMonthDayAndYear } from './parse-34b650b2.js';\nvar iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nvar mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nvar DatetimeButton = /*#__PURE__*/function () {\n  function DatetimeButton(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, DatetimeButton);\n\n    registerInstance(this, hostRef);\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    this.datetimePresentation = 'date-time';\n    this.datetimeActive = false;\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n\n    this.color = 'primary';\n    /**\n     * If `true`, the user cannot interact with the button.\n     */\n\n    this.disabled = false;\n    /**\n     * Check the value property on the linked\n     * ion-datetime and then format it according\n     * to the locale specified on ion-datetime.\n     */\n\n    this.setDateTimeText = function () {\n      var datetimeEl = _this.datetimeEl,\n          datetimePresentation = _this.datetimePresentation;\n\n      if (!datetimeEl) {\n        return;\n      }\n\n      var value = datetimeEl.value,\n          locale = datetimeEl.locale,\n          hourCycle = datetimeEl.hourCycle,\n          preferWheel = datetimeEl.preferWheel,\n          multiple = datetimeEl.multiple;\n\n      if (multiple) {\n        printIonWarning(\"Multi-date selection cannot be used with ion-datetime-button.\\n\\nPlease upvote https://github.com/ionic-team/ionic-framework/issues/25668 if you are interested in seeing this functionality added.\\n      \", _this.el);\n        return;\n      }\n      /**\n       * Both ion-datetime and ion-datetime-button default\n       * to today's date and time if no value is set.\n       */\n\n\n      var parsedDatetime = parseDate(value || getToday());\n      var use24Hour = is24Hour(locale, hourCycle); // TODO(FW-1865) - Remove once FW-1831 is fixed.\n\n      parsedDatetime.tzOffset = undefined;\n      _this.dateText = _this.timeText = undefined;\n\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          var dateText = getMonthDayAndYear(locale, parsedDatetime);\n          var timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\n\n          if (preferWheel) {\n            _this.dateText = \"\".concat(dateText, \" \").concat(timeText);\n          } else {\n            _this.dateText = dateText;\n            _this.timeText = timeText;\n          }\n\n          break;\n\n        case 'date':\n          _this.dateText = getMonthDayAndYear(locale, parsedDatetime);\n          break;\n\n        case 'time':\n          _this.timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\n          break;\n\n        case 'month-year':\n          _this.dateText = getMonthAndYear(locale, parsedDatetime);\n          break;\n\n        case 'month':\n          _this.dateText = getLocalizedDateTime(locale, parsedDatetime, {\n            month: 'long'\n          });\n          break;\n\n        case 'year':\n          _this.dateText = getLocalizedDateTime(locale, parsedDatetime, {\n            year: 'numeric'\n          });\n          break;\n      }\n    };\n    /**\n     * Waits for the ion-datetime to re-render.\n     * This is needed in order to correctly position\n     * a popover relative to the trigger element.\n     */\n\n\n    this.waitForDatetimeChanges = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var datetimeEl;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              datetimeEl = _this.datetimeEl;\n\n              if (datetimeEl) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.resolve());\n\n            case 3:\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                addEventListener(datetimeEl, 'ionRender', resolve, {\n                  once: true\n                });\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    this.handleDateClick = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ev) {\n        var datetimeEl, datetimePresentation, needsPresentationChange, needsChange;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                datetimeEl = _this.datetimeEl, datetimePresentation = _this.datetimePresentation;\n\n                if (datetimeEl) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                needsPresentationChange = false;\n                /**\n                 * When clicking the date button,\n                 * we need to make sure that only a date\n                 * picker is displayed. For presentation styles\n                 * that display content other than a date picker,\n                 * we need to update the presentation style.\n                 */\n\n                _context2.t0 = datetimePresentation;\n                _context2.next = _context2.t0 === 'date-time' ? 7 : _context2.t0 === 'time-date' ? 7 : 10;\n                break;\n\n              case 7:\n                needsChange = datetimeEl.presentation !== 'date';\n                /**\n                 * The date+time wheel picker\n                 * shows date and time together,\n                 * so do not adjust the presentation\n                 * in that case.\n                 */\n\n                if (!datetimeEl.preferWheel && needsChange) {\n                  datetimeEl.presentation = 'date';\n                  needsPresentationChange = true;\n                }\n\n                return _context2.abrupt(\"break\", 10);\n\n              case 10:\n                /**\n                 * Track which button was clicked\n                 * so that it can have the correct\n                 * activated styles applied when\n                 * the modal/popover containing\n                 * the datetime is opened.\n                 */\n                _this.selectedButton = 'date';\n\n                _this.presentOverlay(ev, needsPresentationChange, _this.dateTargetEl);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    this.handleTimeClick = function (ev) {\n      var datetimeEl = _this.datetimeEl,\n          datetimePresentation = _this.datetimePresentation;\n\n      if (!datetimeEl) {\n        return;\n      }\n\n      var needsPresentationChange = false;\n      /**\n       * When clicking the time button,\n       * we need to make sure that only a time\n       * picker is displayed. For presentation styles\n       * that display content other than a time picker,\n       * we need to update the presentation style.\n       */\n\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          var needsChange = datetimeEl.presentation !== 'time';\n\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n\n\n      _this.selectedButton = 'time';\n\n      _this.presentOverlay(ev, needsPresentationChange, _this.timeTargetEl);\n    };\n    /**\n     * If the datetime is presented in an\n     * overlay, the datetime and overlay\n     * should be appropriately sized.\n     * These classes provide default sizing values\n     * that developers can customize.\n     * The goal is to provide an overlay that is\n     * reasonably sized with a datetime that\n     * fills the entire container.\n     */\n\n\n    this.presentOverlay = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(ev, needsPresentationChange, triggerEl) {\n        var overlayEl;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                overlayEl = _this.overlayEl;\n\n                if (overlayEl) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                if (!(overlayEl.tagName === 'ION-POPOVER')) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                if (!needsPresentationChange) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                _context3.next = 7;\n                return _this.waitForDatetimeChanges();\n\n              case 7:\n                /**\n                 * We pass the trigger button element\n                 * so that the popover aligns with the individual\n                 * button that was clicked, not the component container.\n                 */\n                overlayEl.present(Object.assign(Object.assign({}, ev), {\n                  detail: {\n                    ionShadowTarget: triggerEl\n                  }\n                }));\n                _context3.next = 11;\n                break;\n\n              case 10:\n                overlayEl.present();\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2, _x3, _x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  _createClass(DatetimeButton, [{\n    key: \"componentWillLoad\",\n    value: function () {\n      var _componentWillLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this2 = this;\n\n        var datetime, datetimeEl, io, overlayEl;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                datetime = this.datetime;\n\n                if (datetime) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n                return _context4.abrupt(\"return\");\n\n              case 4:\n                datetimeEl = this.datetimeEl = document.getElementById(datetime);\n\n                if (datetimeEl) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                printIonError(\"No ion-datetime instance found for ID '\".concat(datetime, \"'.\"), this.el);\n                return _context4.abrupt(\"return\");\n\n              case 8:\n                /**\n                 * Since the datetime can be used in any context (overlays, accordion, etc)\n                 * we track when it is visible to determine when it is active.\n                 * This informs which button is highlighted as well as the\n                 * aria-expanded state.\n                 */\n                io = new IntersectionObserver(function (entries) {\n                  var ev = entries[0];\n                  _this2.datetimeActive = ev.isIntersecting;\n                }, {\n                  threshold: 0.01\n                });\n                io.observe(datetimeEl);\n                /**\n                 * Get a reference to any modal/popover\n                 * the datetime is being used in so we can\n                 * correctly size it when it is presented.\n                 */\n\n                overlayEl = this.overlayEl = datetimeEl.closest('ion-modal, ion-popover');\n                /**\n                 * The .ion-datetime-button-overlay class contains\n                 * styles that allow any modal/popover to be\n                 * sized according to the dimensions of the datetime.\n                 * If developers want a smaller/larger overlay all they need\n                 * to do is change the width/height of the datetime.\n                 * Additionally, this lets us avoid having to set\n                 * explicit widths on each variant of datetime.\n                 */\n\n                if (overlayEl) {\n                  overlayEl.classList.add('ion-datetime-button-overlay');\n                }\n\n                componentOnReady(datetimeEl, function () {\n                  var datetimePresentation = _this2.datetimePresentation = datetimeEl.presentation || 'date-time';\n                  /**\n                   * Set the initial display\n                   * in the rendered buttons.\n                   *\n                   * From there, we need to listen\n                   * for ionChange to be emitted\n                   * from datetime so we know when\n                   * to re-render the displayed\n                   * text in the buttons.\n                   */\n\n                  _this2.setDateTimeText();\n\n                  addEventListener(datetimeEl, 'ionChange', _this2.setDateTimeText);\n                  /**\n                   * Configure the initial selected button\n                   * in the event that the datetime is displayed\n                   * without clicking one of the datetime buttons.\n                   * For example, a datetime could be expanded\n                   * in an accordion. In this case users only\n                   * need to click the accordion header to show\n                   * the datetime.\n                   */\n\n                  switch (datetimePresentation) {\n                    case 'date-time':\n                    case 'date':\n                    case 'month-year':\n                    case 'month':\n                    case 'year':\n                      _this2.selectedButton = 'date';\n                      break;\n\n                    case 'time-date':\n                    case 'time':\n                      _this2.selectedButton = 'time';\n                      break;\n                  }\n                });\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentWillLoad() {\n        return _componentWillLoad.apply(this, arguments);\n      }\n\n      return componentWillLoad;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _createColorClasses,\n          _this3 = this;\n\n      var color = this.color,\n          dateText = this.dateText,\n          timeText = this.timeText,\n          selectedButton = this.selectedButton,\n          datetimeActive = this.datetimeActive,\n          disabled = this.disabled;\n      var mode = getIonMode(this);\n      return h(Host, {\n        class: createColorClasses(color, (_createColorClasses = {}, _defineProperty(_createColorClasses, mode, true), _defineProperty(_createColorClasses, \"\".concat(selectedButton, \"-active\"), datetimeActive), _defineProperty(_createColorClasses, 'datetime-button-disabled', disabled), _createColorClasses))\n      }, dateText && h(\"button\", {\n        class: \"ion-activatable\",\n        id: \"date-button\",\n        \"aria-expanded\": datetimeActive ? 'true' : 'false',\n        onClick: this.handleDateClick,\n        disabled: disabled,\n        part: \"native\",\n        ref: function ref(el) {\n          return _this3.dateTargetEl = el;\n        }\n      }, h(\"slot\", {\n        name: \"date-target\"\n      }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null)), timeText && h(\"button\", {\n        class: \"ion-activatable\",\n        id: \"time-button\",\n        \"aria-expanded\": datetimeActive ? 'true' : 'false',\n        onClick: this.handleTimeClick,\n        disabled: disabled,\n        part: \"native\",\n        ref: function ref(el) {\n          return _this3.timeTargetEl = el;\n        }\n      }, h(\"slot\", {\n        name: \"time-target\"\n      }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return DatetimeButton;\n}();\n\nDatetimeButton.style = {\n  ios: iosDatetimeButtonCss,\n  md: mdDatetimeButtonCss\n};\nexport { DatetimeButton as ion_datetime_button };","map":null,"metadata":{},"sourceType":"module"}