{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-1a99aeb7.js';\nimport { b as getIonMode } from './ionic-global-04e268e7.js';\nimport { a as addEventListener, b as removeEventListener, d as getAriaLabel } from './helpers-4d272360.js';\nimport { c as createColorClasses, h as hostContext } from './theme-7670341c.js';\nvar radioIosCss = \":host{--inner-border-radius:50%;display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;contain:layout size style}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}label{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}[dir=rtl] label,:host-context([dir=rtl]) label{left:unset;right:unset;right:0}label::-moz-focus-inner{border:0}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host(:focus){outline:none}:host{--color-checked:var(--ion-color-primary, #3880ff);width:15px;height:24px}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{margin-left:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.item-radio.item-ios ion-label{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:2px;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:0.3}:host(.ion-focused) .radio-icon::after{border-radius:var(--inner-border-radius);left:-9px;top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint, #4c8dff);content:\\\"\\\";opacity:0.2}:host-context([dir=rtl]):host(.ion-focused) .radio-icon::after,:host-context([dir=rtl]).ion-focused .radio-icon::after{left:unset;right:unset;right:-9px}:host(.in-item){margin-left:10px;margin-right:11px;margin-top:8px;margin-bottom:8px;display:block;position:static}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:10px;margin-inline-start:10px;-webkit-margin-end:11px;margin-inline-end:11px}}:host(.in-item[slot=start]){margin-left:3px;margin-right:21px;margin-top:8px;margin-bottom:8px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:3px;margin-inline-start:3px;-webkit-margin-end:21px;margin-inline-end:21px}}\";\nvar radioMdCss = \":host{--inner-border-radius:50%;display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;contain:layout size style}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}label{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}[dir=rtl] label,:host-context([dir=rtl]) label{left:unset;right:unset;right:0}label::-moz-focus-inner{border:0}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host(:focus){outline:none}:host{--color:var(--ion-color-step-400, #999999);--color-checked:var(--ion-color-primary, #3880ff);--border-width:2px;--border-style:solid;--border-radius:50%;width:20px;height:20px}:host(.ion-color) .radio-inner{background:var(--ion-color-base)}:host(.ion-color.radio-checked) .radio-icon{border-color:var(--ion-color-base)}.radio-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;border-radius:var(--border-radius);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--color)}.radio-inner{border-radius:var(--inner-border-radius);width:calc(50% + var(--border-width));height:calc(50% + var(--border-width));-webkit-transform:scale3d(0, 0, 0);transform:scale3d(0, 0, 0);-webkit-transition:-webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:-webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:transform 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);background:var(--color-checked)}:host(.radio-checked) .radio-icon{border-color:var(--color-checked)}:host(.radio-checked) .radio-inner{-webkit-transform:scale3d(1, 1, 1);transform:scale3d(1, 1, 1)}:host(.radio-disabled){opacity:0.3}:host(.ion-focused) .radio-icon::after{border-radius:var(--inner-border-radius);left:-12px;top:-12px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint, #4c8dff);content:\\\"\\\";opacity:0.2}:host-context([dir=rtl]):host(.ion-focused) .radio-icon::after,:host-context([dir=rtl]).ion-focused .radio-icon::after{left:unset;right:unset;right:-12px}:host(.in-item){margin-left:0;margin-right:0;margin-top:9px;margin-bottom:9px;display:block;position:static}:host(.in-item[slot=start]){margin-left:4px;margin-right:36px;margin-top:11px;margin-bottom:10px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:36px;margin-inline-end:36px}}\";\n\nvar Radio = /*#__PURE__*/function () {\n  function Radio(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Radio);\n\n    registerInstance(this, hostRef);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.inputId = \"ion-rb-\".concat(radioButtonIds++);\n    this.radioGroup = null;\n    /**\n     * If `true`, the radio is selected.\n     */\n\n    this.checked = false;\n    /**\n     * The tabindex of the radio button.\n     * @internal\n     */\n\n    this.buttonTabindex = -1;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n\n    this.name = this.inputId;\n    /**\n     * If `true`, the user cannot interact with the radio.\n     */\n\n    this.disabled = false;\n\n    this.updateState = function () {\n      if (_this.radioGroup) {\n        _this.checked = _this.radioGroup.value === _this.value;\n      }\n    };\n\n    this.onClick = function () {\n      _this.checked = _this.nativeInput.checked;\n    };\n\n    this.onFocus = function () {\n      _this.ionFocus.emit();\n    };\n\n    this.onBlur = function () {\n      _this.ionBlur.emit();\n    };\n  }\n  /** @internal */\n\n\n  _createClass(Radio, [{\n    key: \"setFocus\",\n    value: function () {\n      var _setFocus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ev) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                ev.stopPropagation();\n                ev.preventDefault();\n                this.el.focus();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setFocus(_x) {\n        return _setFocus.apply(this, arguments);\n      }\n\n      return setFocus;\n    }()\n    /** @internal */\n\n  }, {\n    key: \"setButtonTabindex\",\n    value: function () {\n      var _setButtonTabindex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(value) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.buttonTabindex = value;\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setButtonTabindex(_x2) {\n        return _setButtonTabindex.apply(this, arguments);\n      }\n\n      return setButtonTabindex;\n    }()\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      if (this.value === undefined) {\n        this.value = this.inputId;\n      }\n\n      var radioGroup = this.radioGroup = this.el.closest('ion-radio-group');\n\n      if (radioGroup) {\n        this.updateState();\n        addEventListener(radioGroup, 'ionChange', this.updateState);\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var radioGroup = this.radioGroup;\n\n      if (radioGroup) {\n        removeEventListener(radioGroup, 'ionChange', this.updateState);\n        this.radioGroup = null;\n      }\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.emitStyle();\n    }\n  }, {\n    key: \"emitStyle\",\n    value: function emitStyle() {\n      this.ionStyle.emit({\n        'radio-checked': this.checked,\n        'interactive-disabled': this.disabled\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _createColorClasses,\n          _this2 = this;\n\n      var inputId = this.inputId,\n          disabled = this.disabled,\n          checked = this.checked,\n          color = this.color,\n          el = this.el,\n          buttonTabindex = this.buttonTabindex;\n      var mode = getIonMode(this);\n\n      var _getAriaLabel = getAriaLabel(el, inputId),\n          label = _getAriaLabel.label,\n          labelId = _getAriaLabel.labelId,\n          labelText = _getAriaLabel.labelText;\n\n      return h(Host, {\n        \"aria-checked\": \"\".concat(checked),\n        \"aria-hidden\": disabled ? 'true' : null,\n        \"aria-labelledby\": label ? labelId : null,\n        role: \"radio\",\n        tabindex: buttonTabindex,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onClick: this.onClick,\n        class: createColorClasses(color, (_createColorClasses = {}, _defineProperty(_createColorClasses, mode, true), _defineProperty(_createColorClasses, 'in-item', hostContext('ion-item', el)), _defineProperty(_createColorClasses, \"interactive\", true), _defineProperty(_createColorClasses, 'radio-checked', checked), _defineProperty(_createColorClasses, 'radio-disabled', disabled), _createColorClasses))\n      }, h(\"div\", {\n        class: \"radio-icon\",\n        part: \"container\"\n      }, h(\"div\", {\n        class: \"radio-inner\",\n        part: \"mark\"\n      }), h(\"div\", {\n        class: \"radio-ripple\"\n      })), h(\"label\", {\n        htmlFor: inputId\n      }, labelText), h(\"input\", {\n        type: \"radio\",\n        checked: checked,\n        disabled: disabled,\n        tabindex: \"-1\",\n        id: inputId,\n        ref: function ref(nativeEl) {\n          return _this2.nativeInput = nativeEl;\n        }\n      }));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"color\": [\"emitStyle\"],\n        \"checked\": [\"emitStyle\"],\n        \"disabled\": [\"emitStyle\"]\n      };\n    }\n  }]);\n\n  return Radio;\n}();\n\nvar radioButtonIds = 0;\nRadio.style = {\n  ios: radioIosCss,\n  md: radioMdCss\n};\n\nvar RadioGroup = /*#__PURE__*/function () {\n  function RadioGroup(hostRef) {\n    var _this3 = this;\n\n    _classCallCheck(this, RadioGroup);\n\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.inputId = \"ion-rg-\".concat(radioGroupIds++);\n    this.labelId = \"\".concat(this.inputId, \"-lbl\");\n    /**\n     * If `true`, the radios can be deselected.\n     */\n\n    this.allowEmptySelection = false;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n\n    this.name = this.inputId;\n\n    this.setRadioTabindex = function (value) {\n      var radios = _this3.getRadios(); // Get the first radio that is not disabled and the checked one\n\n\n      var first = radios.find(function (radio) {\n        return !radio.disabled;\n      });\n      var checked = radios.find(function (radio) {\n        return radio.value === value && !radio.disabled;\n      });\n\n      if (!first && !checked) {\n        return;\n      } // If an enabled checked radio exists, set it to be the focusable radio\n      // otherwise we default to focus the first radio\n\n\n      var focusable = checked || first;\n\n      var _iterator = _createForOfIteratorHelper(radios),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var radio = _step.value;\n          var tabindex = radio === focusable ? 0 : -1;\n          radio.setButtonTabindex(tabindex);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n\n    this.onClick = function (ev) {\n      ev.preventDefault();\n      var selectedRadio = ev.target && ev.target.closest('ion-radio');\n\n      if (selectedRadio) {\n        var currentValue = _this3.value;\n        var newValue = selectedRadio.value;\n\n        if (newValue !== currentValue) {\n          _this3.value = newValue;\n        } else if (_this3.allowEmptySelection) {\n          _this3.value = undefined;\n        }\n      }\n    };\n  }\n\n  _createClass(RadioGroup, [{\n    key: \"valueChanged\",\n    value: function valueChanged(value) {\n      this.setRadioTabindex(value);\n      this.ionChange.emit({\n        value: value\n      });\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      this.setRadioTabindex(this.value);\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var header, label;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // Get the list header if it exists and set the id\n                // this is used to set aria-labelledby\n                header = this.el.querySelector('ion-list-header') || this.el.querySelector('ion-item-divider');\n\n                if (header) {\n                  label = this.label = header.querySelector('ion-label');\n\n                  if (label) {\n                    this.labelId = label.id = this.name + '-lbl';\n                  }\n                }\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"getRadios\",\n    value: function getRadios() {\n      return Array.from(this.el.querySelectorAll('ion-radio'));\n    }\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(ev) {\n      var inSelectPopover = !!this.el.closest('ion-select-popover');\n\n      if (ev.target && !this.el.contains(ev.target)) {\n        return;\n      } // Get all radios inside of the radio group and then\n      // filter out disabled radios since we need to skip those\n\n\n      var radios = this.getRadios().filter(function (radio) {\n        return !radio.disabled;\n      }); // Only move the radio if the current focus is in the radio group\n\n      if (ev.target && radios.includes(ev.target)) {\n        var index = radios.findIndex(function (radio) {\n          return radio === ev.target;\n        });\n        var current = radios[index];\n        var next; // If hitting arrow down or arrow right, move to the next radio\n        // If we're on the last radio, move to the first radio\n\n        if (['ArrowDown', 'ArrowRight'].includes(ev.code)) {\n          next = index === radios.length - 1 ? radios[0] : radios[index + 1];\n        } // If hitting arrow up or arrow left, move to the previous radio\n        // If we're on the first radio, move to the last radio\n\n\n        if (['ArrowUp', 'ArrowLeft'].includes(ev.code)) {\n          next = index === 0 ? radios[radios.length - 1] : radios[index - 1];\n        }\n\n        if (next && radios.includes(next)) {\n          next.setFocus(ev);\n\n          if (!inSelectPopover) {\n            this.value = next.value;\n          }\n        } // Update the radio group value when a user presses the\n        // space bar on top of a selected radio\n\n\n        if (['Space'].includes(ev.code)) {\n          this.value = this.allowEmptySelection && this.value !== undefined ? undefined : current.value; // Prevent browsers from jumping\n          // to the bottom of the screen\n\n          ev.preventDefault();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var label = this.label,\n          labelId = this.labelId;\n      var mode = getIonMode(this);\n      return h(Host, {\n        role: \"radiogroup\",\n        \"aria-labelledby\": label ? labelId : null,\n        onClick: this.onClick,\n        class: mode\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"value\": [\"valueChanged\"]\n      };\n    }\n  }]);\n\n  return RadioGroup;\n}();\n\nvar radioGroupIds = 0;\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };","map":null,"metadata":{},"sourceType":"module"}