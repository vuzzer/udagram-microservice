{"ast":null,"code":"import _regeneratorRuntime from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { __awaiter } from \"tslib\";\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar API_HOST = environment.apiHost;\nexport var ApiService = /*#__PURE__*/(function () {\n  var ApiService = /*#__PURE__*/function () {\n    function ApiService(http) {\n      _classCallCheck(this, ApiService);\n\n      this.http = http;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    _createClass(ApiService, [{\n      key: \"setAuthToken\",\n      value: function setAuthToken(token) {\n        this.httpOptions.headers = this.httpOptions.headers.append('Authorization', \"jwt \".concat(token));\n        this.token = token;\n      }\n    }, {\n      key: \"get\",\n      value: function get(endpoint) {\n        var url = \"\".concat(API_HOST).concat(endpoint);\n        var req = this.http.get(url, this.httpOptions).pipe(map(ApiService.extractData));\n        return req.toPromise().catch(function (e) {\n          ApiService.handleError(e);\n          throw e;\n        });\n      }\n    }, {\n      key: \"post\",\n      value: function post(endpoint, data) {\n        var url = \"\".concat(API_HOST).concat(endpoint);\n        return this.http.post(url, data, this.httpOptions).toPromise().catch(function (e) {\n          ApiService.handleError(e);\n          throw e;\n        });\n      }\n    }, {\n      key: \"upload\",\n      value: function upload(endpoint, file, payload) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _this = this;\n\n          var signed_url, headers, req;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return this.get(\"\".concat(endpoint, \"/signed-url/\").concat(file.name));\n\n                case 2:\n                  signed_url = _context.sent.url;\n                  headers = new HttpHeaders({\n                    'Content-Type': file.type\n                  });\n                  req = new HttpRequest('PUT', signed_url, file, {\n                    headers: headers,\n                    reportProgress: true // track progress\n\n                  });\n                  return _context.abrupt(\"return\", new Promise(function (resolve) {\n                    _this.http.request(req).subscribe(function (resp) {\n                      if (resp && resp.status && resp.status === 200) {\n                        resolve(_this.post(endpoint, payload));\n                      }\n                    });\n                  }));\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      }\n    }], [{\n      key: \"handleError\",\n      value: function handleError(error) {\n        alert(error.message);\n      }\n    }, {\n      key: \"extractData\",\n      value: function extractData(res) {\n        var body = res;\n        return body || {};\n      }\n    }]);\n\n    return ApiService;\n  }();\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}