{"ast":null,"code":"import _defineProperty from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/famillelasme/Documents/engineer/udagram-microservice/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-1a99aeb7.js';\nimport { j as reorderThreeOutline, k as reorderTwoSharp } from './index-40bb69ee.js';\nimport { b as getIonMode } from './ionic-global-04e268e7.js';\nimport { f as findClosestIonContent, g as getScrollElement } from './index-3413f7be.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-683b3b3c.js';\nimport './helpers-4d272360.js';\nimport './index-c4b11676.js';\nvar reorderIosCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:34px;opacity:0.4}\";\nvar reorderMdCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:31px;opacity:0.3}\";\n\nvar Reorder = /*#__PURE__*/function () {\n  function Reorder(hostRef) {\n    _classCallCheck(this, Reorder);\n\n    registerInstance(this, hostRef);\n  }\n\n  _createClass(Reorder, [{\n    key: \"onClick\",\n    value: function onClick(ev) {\n      var reorderGroup = this.el.closest('ion-reorder-group');\n      ev.preventDefault(); // Only stop event propagation if the reorder is inside of an enabled\n      // reorder group. This allows interaction with clickable children components.\n\n      if (!reorderGroup || !reorderGroup.disabled) {\n        ev.stopImmediatePropagation();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mode = getIonMode(this);\n      var reorderIcon = mode === 'ios' ? reorderThreeOutline : reorderTwoSharp;\n      return h(Host, {\n        class: mode\n      }, h(\"slot\", null, h(\"ion-icon\", {\n        icon: reorderIcon,\n        lazy: false,\n        class: \"reorder-icon\",\n        part: \"icon\"\n      })));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return Reorder;\n}();\n\nReorder.style = {\n  ios: reorderIosCss,\n  md: reorderMdCss\n};\nvar reorderGroupCss = \".reorder-list-active>*{-webkit-transition:-webkit-transform 300ms;transition:-webkit-transform 300ms;transition:transform 300ms;transition:transform 300ms, -webkit-transform 300ms;will-change:transform}.reorder-enabled{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.reorder-enabled ion-reorder{display:block;cursor:-webkit-grab;cursor:grab;pointer-events:all;-ms-touch-action:none;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:-webkit-grabbing;cursor:grabbing}.reorder-selected{position:relative;-webkit-transition:none !important;transition:none !important;-webkit-box-shadow:0 0 10px rgba(0, 0, 0, 0.4);box-shadow:0 0 10px rgba(0, 0, 0, 0.4);opacity:0.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}\";\n\nvar ReorderGroup = /*#__PURE__*/function () {\n  function ReorderGroup(hostRef) {\n    _classCallCheck(this, ReorderGroup);\n\n    registerInstance(this, hostRef);\n    this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\n    this.lastToIndex = -1;\n    this.cachedHeights = [];\n    this.scrollElTop = 0;\n    this.scrollElBottom = 0;\n    this.scrollElInitial = 0;\n    this.containerTop = 0;\n    this.containerBottom = 0;\n    this.state = 0\n    /* Idle */\n    ;\n    /**\n     * If `true`, the reorder will be hidden.\n     */\n\n    this.disabled = true;\n  }\n\n  _createClass(ReorderGroup, [{\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      if (this.gesture) {\n        this.gesture.enable(!this.disabled);\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this = this;\n\n        var contentEl;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contentEl = findClosestIonContent(this.el);\n\n                if (!contentEl) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return getScrollElement(contentEl);\n\n              case 4:\n                this.scrollEl = _context.sent;\n\n              case 5:\n                _context.next = 7;\n                return import('./index-3f1a7d95.js');\n\n              case 7:\n                this.gesture = _context.sent.createGesture({\n                  el: this.el,\n                  gestureName: 'reorder',\n                  gesturePriority: 110,\n                  threshold: 0,\n                  direction: 'y',\n                  passive: false,\n                  canStart: function canStart(detail) {\n                    return _this.canStart(detail);\n                  },\n                  onStart: function onStart(ev) {\n                    return _this.onStart(ev);\n                  },\n                  onMove: function onMove(ev) {\n                    return _this.onMove(ev);\n                  },\n                  onEnd: function onEnd() {\n                    return _this.onEnd();\n                  }\n                });\n                this.disabledChanged();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.onEnd();\n\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      }\n    }\n    /**\n     * Completes the reorder operation. Must be called by the `ionItemReorder` event.\n     *\n     * If a list of items is passed, the list will be reordered and returned in the\n     * proper order.\n     *\n     * If no parameters are passed or if `true` is passed in, the reorder will complete\n     * and the item will remain in the position it was dragged to. If `false` is passed,\n     * the reorder will complete and the item will bounce back to its original position.\n     *\n     * @param listOrReorder A list of items to be sorted and returned in the new order or a\n     * boolean of whether or not the reorder should reposition the item.\n     */\n\n  }, {\n    key: \"complete\",\n    value: function complete(listOrReorder) {\n      return Promise.resolve(this.completeSync(listOrReorder));\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart(ev) {\n      if (this.selectedItemEl || this.state !== 0\n      /* Idle */\n      ) {\n        return false;\n      }\n\n      var target = ev.event.target;\n      var reorderEl = target.closest('ion-reorder');\n\n      if (!reorderEl) {\n        return false;\n      }\n\n      var item = findReorderItem(reorderEl, this.el);\n\n      if (!item) {\n        return false;\n      }\n\n      ev.data = item;\n      return true;\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(ev) {\n      ev.event.preventDefault();\n      var item = this.selectedItemEl = ev.data;\n      var heights = this.cachedHeights;\n      heights.length = 0;\n      var el = this.el;\n      var children = el.children;\n\n      if (!children || children.length === 0) {\n        return;\n      }\n\n      var sum = 0;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        sum += child.offsetHeight;\n        heights.push(sum);\n        child.$ionIndex = i;\n      }\n\n      var box = el.getBoundingClientRect();\n      this.containerTop = box.top;\n      this.containerBottom = box.bottom;\n\n      if (this.scrollEl) {\n        var scrollBox = this.scrollEl.getBoundingClientRect();\n        this.scrollElInitial = this.scrollEl.scrollTop;\n        this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\n        this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\n      } else {\n        this.scrollElInitial = 0;\n        this.scrollElTop = 0;\n        this.scrollElBottom = 0;\n      }\n\n      this.lastToIndex = indexForItem(item);\n      this.selectedItemHeight = item.offsetHeight;\n      this.state = 1\n      /* Active */\n      ;\n      item.classList.add(ITEM_REORDER_SELECTED);\n      hapticSelectionStart();\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(ev) {\n      var selectedItem = this.selectedItemEl;\n\n      if (!selectedItem) {\n        return;\n      } // Scroll if we reach the scroll margins\n\n\n      var scroll = this.autoscroll(ev.currentY); // // Get coordinate\n\n      var top = this.containerTop - scroll;\n      var bottom = this.containerBottom - scroll;\n      var currentY = Math.max(top, Math.min(ev.currentY, bottom));\n      var deltaY = scroll + currentY - ev.startY;\n      var normalizedY = currentY - top;\n      var toIndex = this.itemIndexForTop(normalizedY);\n\n      if (toIndex !== this.lastToIndex) {\n        var fromIndex = indexForItem(selectedItem);\n        this.lastToIndex = toIndex;\n        hapticSelectionChanged();\n        this.reorderMove(fromIndex, toIndex);\n      } // Update selected item position\n\n\n      selectedItem.style.transform = \"translateY(\".concat(deltaY, \"px)\");\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd() {\n      var selectedItemEl = this.selectedItemEl;\n      this.state = 2\n      /* Complete */\n      ;\n\n      if (!selectedItemEl) {\n        this.state = 0\n        /* Idle */\n        ;\n        return;\n      }\n\n      var toIndex = this.lastToIndex;\n      var fromIndex = indexForItem(selectedItemEl);\n\n      if (toIndex === fromIndex) {\n        this.completeSync();\n      } else {\n        this.ionItemReorder.emit({\n          from: fromIndex,\n          to: toIndex,\n          complete: this.completeSync.bind(this)\n        });\n      }\n\n      hapticSelectionEnd();\n    }\n  }, {\n    key: \"completeSync\",\n    value: function completeSync(listOrReorder) {\n      var selectedItemEl = this.selectedItemEl;\n\n      if (selectedItemEl && this.state === 2\n      /* Complete */\n      ) {\n        var children = this.el.children;\n        var len = children.length;\n        var toIndex = this.lastToIndex;\n        var fromIndex = indexForItem(selectedItemEl);\n\n        if (toIndex !== fromIndex && (listOrReorder === undefined || listOrReorder === true)) {\n          var ref = fromIndex < toIndex ? children[toIndex + 1] : children[toIndex];\n          this.el.insertBefore(selectedItemEl, ref);\n        }\n\n        if (Array.isArray(listOrReorder)) {\n          listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\n        }\n\n        for (var i = 0; i < len; i++) {\n          children[i].style['transform'] = '';\n        }\n\n        selectedItemEl.style.transition = '';\n        selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\n        this.selectedItemEl = undefined;\n        this.state = 0\n        /* Idle */\n        ;\n      }\n\n      return listOrReorder;\n    }\n  }, {\n    key: \"itemIndexForTop\",\n    value: function itemIndexForTop(deltaY) {\n      var heights = this.cachedHeights; // TODO: since heights is a sorted array of integers, we can do\n      // speed up the search using binary search. Remember that linear-search is still\n      // faster than binary-search for small arrays (<64) due CPU branch misprediction.\n\n      for (var i = 0; i < heights.length; i++) {\n        if (heights[i] > deltaY) {\n          return i;\n        }\n      }\n\n      return heights.length - 1;\n    }\n    /********* DOM WRITE ********* */\n\n  }, {\n    key: \"reorderMove\",\n    value: function reorderMove(fromIndex, toIndex) {\n      var itemHeight = this.selectedItemHeight;\n      var children = this.el.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var style = children[i].style;\n        var value = '';\n\n        if (i > fromIndex && i <= toIndex) {\n          value = \"translateY(\".concat(-itemHeight, \"px)\");\n        } else if (i < fromIndex && i >= toIndex) {\n          value = \"translateY(\".concat(itemHeight, \"px)\");\n        }\n\n        style['transform'] = value;\n      }\n    }\n  }, {\n    key: \"autoscroll\",\n    value: function autoscroll(posY) {\n      if (!this.scrollEl) {\n        return 0;\n      }\n\n      var amount = 0;\n\n      if (posY < this.scrollElTop) {\n        amount = -SCROLL_JUMP;\n      } else if (posY > this.scrollElBottom) {\n        amount = SCROLL_JUMP;\n      }\n\n      if (amount !== 0) {\n        this.scrollEl.scrollBy(0, amount);\n      }\n\n      return this.scrollEl.scrollTop - this.scrollElInitial;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _class;\n\n      var mode = getIonMode(this);\n      return h(Host, {\n        class: (_class = {}, _defineProperty(_class, mode, true), _defineProperty(_class, 'reorder-enabled', !this.disabled), _defineProperty(_class, 'reorder-list-active', this.state !== 0), _class)\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"disabled\": [\"disabledChanged\"]\n      };\n    }\n  }]);\n\n  return ReorderGroup;\n}();\n\nvar indexForItem = function indexForItem(element) {\n  return element['$ionIndex'];\n};\n\nvar findReorderItem = function findReorderItem(node, container) {\n  var parent;\n\n  while (node) {\n    parent = node.parentElement;\n\n    if (parent === container) {\n      return node;\n    }\n\n    node = parent;\n  }\n\n  return undefined;\n};\n\nvar AUTO_SCROLL_MARGIN = 60;\nvar SCROLL_JUMP = 10;\nvar ITEM_REORDER_SELECTED = 'reorder-selected';\n\nvar reorderArray = function reorderArray(array, from, to) {\n  var element = array[from];\n  array.splice(from, 1);\n  array.splice(to, 0, element);\n  return array.slice();\n};\n\nReorderGroup.style = reorderGroupCss;\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };","map":null,"metadata":{},"sourceType":"module"}